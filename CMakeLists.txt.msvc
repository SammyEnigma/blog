cmake_minimum_required(VERSION 3.0.0)

set(CMAKE_TOOLCHAIN_FILE "C:/Code/vcpkg/scripts/buildsystems/vcpkg.cmake")

project(blog VERSION 1.0
	DESCRIPTION "Vorbrodt's C++ Blog - Code Samples"
	HOMEPAGE_URL "https://vorbrodt.blog"
	LANGUAGES C CXX ASM)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_package(Threads           MODULE REQUIRED)
find_package(TBB               CONFIG REQUIRED)
find_package(ParallelSTL       CONFIG REQUIRED)
find_package(Boost             COMPONENTS serialization program_options timer stacktrace_windbg filesystem system REQUIRED)
find_package(Range-v3          CONFIG REQUIRED)
find_package(benchmark         CONFIG REQUIRED)
find_package(Catch2            CONFIG REQUIRED)
find_package(Hayai             CONFIG REQUIRED)
find_package(nonius            CONFIG REQUIRED)
find_package(celero            CONFIG REQUIRED)
find_package(FMT               CONFIG REQUIRED)
find_package(cryptopp          CONFIG REQUIRED)
find_package(SOCI              CONFIG REQUIRED)
find_package(libmysql                 REQUIRED)
find_package(Thrift            CONFIG REQUIRED)
find_package(Protobuf          MODULE REQUIRED)
find_package(gRPC              CONFIG REQUIRED)
find_package(lz4               CONFIG REQUIRED)
find_package(OpenSSL           MODULE REQUIRED)
find_package(CURL              MODULE REQUIRED)
find_package(unofficial-curlpp CONFIG REQUIRED)
# find_package(BOTAN             CONFIG REQUIRED)
# find_package(MYSQL                    REQUIRED) # no cmake
# find_package(WolfSSL                  REQUIRED)
# find_package(XMLRPC                   REQUIRED)

include_directories("C:\\Code\\vcpkg\\installed\\x64-windows\\include")
link_directories("C:\\Code\\vcpkg\\installed\\x64-windows\\lib")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++latest /permissive-")
set(CMAKE_CXX_STANDARD_LIBRARIES "${CMAKE_THREAD_LIBS_INIT}")

set(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin")

add_subdirectory(src)

#get_cmake_property(_variableNames VARIABLES)
#list (SORT _variableNames)
#foreach (_variableName ${_variableNames})
#	message(STATUS "${_variableName}=${${_variableName}}")
#endforeach()
