add_executable(alignas alignas.cpp)
add_executable(aos_soa aos_soa.cpp)
add_executable(assignment assignment.cpp)
add_executable(atomics atomics.cpp)
add_executable(attributes attributes.cpp)
add_executable(bad_pointer bad_pointer.cpp)
add_executable(base64 base64.cpp)
add_executable(benchmark-catch benchmark-catch.cpp)
add_executable(bloom bloom.cpp)
add_executable(c_api_lambda c_api_lambda.cpp)
add_executable(cache cache.cpp)
add_executable(class class.cpp)
add_executable(colors colors.cpp)
add_executable(constructors constructors.cpp)
add_executable(deadlock deadlock.cpp)
add_executable(dekker dekker.cpp)
add_executable(dekker_n dekker_n.cpp)
add_executable(enum enum.cpp)
add_executable(enum2 enum2.cpp)
add_executable(exceptions exceptions.cpp)
add_executable(hash hash.cpp)
add_executable(interview_1 interview_1.cpp)
add_executable(interview_2 interview_2.cpp)
add_executable(interview_4 interview_4.cpp)
add_executable(interview_5 interview_5.cpp)
add_executable(interview_6 interview_6.cpp)
add_executable(inverting inverting.cpp)
add_executable(membars membars.cpp)
add_executable(multi_hash multi_hash.cpp)
add_executable(new new.cpp)
add_executable(playground playground.cpp)
add_executable(pool pool_test.cpp)
add_executable(pragma pragma.cpp)
add_executable(property property.cpp)
add_executable(queue queue.cpp)
add_executable(random random_test.cpp)
add_executable(ranges ranges.cpp)
set_source_files_properties(ranges.cpp PROPERTIES COMPILE_FLAGS "/permissive- /experimental:preprocessor")
add_executable(sorting sorting.cpp)
add_executable(sso sso.cpp)
add_executable(templates templates.cpp)
add_executable(timer timer_test.cpp)
add_executable(try_block try_block.cpp)
add_executable(unique unique.cpp)
add_executable(unordered unordered.cpp)



add_executable(fmt fmt.cpp)
target_link_libraries(fmt PRIVATE fmt::fmt fmt::fmt-header-only)

add_executable(pstl pstl_test.cpp)
target_link_libraries(pstl PRIVATE TBB::tbb)

add_executable(geoip geoip.cpp)
target_link_libraries(geoip PRIVATE CURL::libcurl unofficial::curlpp::curlpp)

add_executable(compression compression.cpp)
target_link_libraries(compression lz4::lz4)

add_executable(uuid uuid.cpp)
target_link_libraries(uuid bcrypt.lib)

add_executable(xml xml.cpp)
target_link_libraries(xml Boost::serialization)

add_executable(options options.cpp)
target_link_libraries(options Boost::program_options)

add_executable(cpu_timer cpu_timer.cpp)
target_link_libraries(cpu_timer Boost::timer)

add_executable(stacktrace stacktrace.cpp)
target_link_libraries(stacktrace Boost::stacktrace_windbg)

add_executable(plugin_load plugin_load.cpp)
target_link_libraries(plugin_load Boost::filesystem Boost::system)
add_library(plugin SHARED plugin_lib.cpp)

add_executable(file_hash file_hash.cpp)
target_link_libraries(file_hash botan)

add_executable(crypto crypto.cpp)
target_link_libraries(crypto PRIVATE cryptopp-static botan wolfssl)

add_executable(benchmark-celero benchmark-celero.cpp)
target_link_libraries(benchmark-celero PRIVATE celero)

add_executable(benchmark-hayai benchmark-hayai.cpp)
set_source_files_properties(benchmark-hayai.cpp PROPERTIES COMPILE_FLAGS "/std:c++14")
target_link_libraries(benchmark-hayai PRIVATE hayai_main)

add_executable(benchmark-google benchmark-google.cpp)
target_link_libraries(benchmark-google PRIVATE benchmark::benchmark benchmark::benchmark_main shlwapi)

add_executable(benchmark-nonius benchmark-nonius.cpp)
target_link_libraries(benchmark-nonius PRIVATE Nonius::nonius)



add_custom_command(
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/protobuf.pb.h"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/protobuf.pb.cc"
	COMMAND protobuf::protoc
	ARGS --proto_path=${CMAKE_CURRENT_SOURCE_DIR}
		--cpp_out=${CMAKE_CURRENT_SOURCE_DIR}
		${CMAKE_CURRENT_SOURCE_DIR}/protobuf.proto)
add_executable(protobuf protobuf.cpp protobuf.pb.cc)
target_link_libraries(protobuf PRIVATE protobuf::libprotoc protobuf::libprotobuf protobuf::libprotobuf-lite)



get_target_property(gRPC_CPP_PLUGIN_EXECUTABLE gRPC::grpc_cpp_plugin IMPORTED_LOCATION_RELEASE)
add_custom_command(
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/grpc_service.pb.h"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/grpc_service.pb.cc"
	COMMAND protobuf::protoc
	ARGS --proto_path=${CMAKE_CURRENT_SOURCE_DIR}
		--cpp_out=${CMAKE_CURRENT_SOURCE_DIR}
		${CMAKE_CURRENT_SOURCE_DIR}/grpc_service.proto)
add_custom_command(
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/grpc_service.grpc.pb.h"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/grpc_service.grpc.pb.cc"
	COMMAND protobuf::protoc
	ARGS --proto_path=${CMAKE_CURRENT_SOURCE_DIR}
		--grpc_out=${CMAKE_CURRENT_SOURCE_DIR}
		--plugin=protoc-gen-grpc=${gRPC_CPP_PLUGIN_EXECUTABLE}
		${CMAKE_CURRENT_SOURCE_DIR}/grpc_service.proto)
add_executable(grpc_service_c grpc_service_c.cpp grpc_service.pb.cc grpc_service.grpc.pb.cc)
target_link_libraries(grpc_service_c PRIVATE protobuf::libprotoc protobuf::libprotobuf protobuf::libprotobuf-lite gRPC::gpr gRPC::grpc gRPC::grpc++ gRPC::grpc_cronet)
add_executable(grpc_service_s grpc_service_s.cpp grpc_service.pb.cc grpc_service.grpc.pb.cc)
target_link_libraries(grpc_service_s PRIVATE protobuf::libprotoc protobuf::libprotobuf protobuf::libprotobuf-lite gRPC::gpr gRPC::grpc gRPC::grpc++ gRPC::grpc_cronet)



add_custom_command(
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/ThriftService.h"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/ThriftService.cpp"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/ThriftService_server.skeleton.cpp"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/thrift_service_constants.h"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/thrift_service_constants.cpp"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/thrift_service_types.h"
	OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/thrift_service_types.cpp"
	COMMAND "${THRIFT_BIN_DIR}\\thrift.exe"
	ARGS -out ${CMAKE_CURRENT_SOURCE_DIR}
		-gen cpp ${CMAKE_CURRENT_SOURCE_DIR}/thrift_service.thrift)
add_executable(thrift_service_c thrift_service_c.cpp ThriftService.cpp thrift_service_constants.cpp thrift_service_types.cpp)
target_link_libraries(thrift_service_c PRIVATE thrift::thrift)
add_executable(thrift_service_s thrift_service_s.cpp ThriftService.cpp thrift_service_constants.cpp thrift_service_types.cpp)
target_link_libraries(thrift_service_s PRIVATE thrift::thrift)
