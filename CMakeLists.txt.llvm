cmake_minimum_required(VERSION 3.20.1)

project(blog VERSION 1.0
	DESCRIPTION "Vorbrodt's C++ Blog - Code Samples"
	HOMEPAGE_URL "https://vorbrodt.blog"
	LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif()

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATH "/usr/local/Cellar/cmake/3.20.1/share/cmake/Modules")

find_package(Threads REQUIRED)
find_package(TBB REQUIRED)
find_package(PARALLELSTL REQUIRED)
find_package(Boost REQUIRED COMPONENTS
	serialization
	stacktrace_basic
	filesystem
	system
	timer
	program_options)
find_package(range-v3 REQUIRED)
find_package(Protobuf REQUIRED)
find_package(THRIFT REQUIRED)
find_package(GRPC REQUIRED)
find_package(MYSQL REQUIRED)
find_package(Soci REQUIRED)
find_package(Catch2 REQUIRED)
find_package(benchmark REQUIRED)
find_package(hayai REQUIRED)
find_package(LZ4 REQUIRED)
find_package(XMLRPC REQUIRED)
find_package(CURL REQUIRED)
find_package(CURLpp REQUIRED)
find_package(FMT REQUIRED)
# find_package(CryptoPP REQUIRED)
find_package(WOLFSSL REQUIRED)
find_package(BOTAN REQUIRED)

set(CMAKE_CXX_FLAGS "-I/usr/local/include -I/usr/local/include/c++/v1 -Wall -pedantic ${CMAKE_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g")
# set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ofast -march=native")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -O3 -mllvm -polly -mllvm -polly-parallel -mllvm -polly-vectorizer=stripmine")
# set(CMAKE_EXE_LINKER_FLAGS "-L/usr/local/lib -Wl,-rpath,/usr/local/lib ${CMAKE_EXE_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "-L/usr/local/lib -Wl,-rpath,/usr/local/lib -lgomp ${CMAKE_EXE_LINKER_FLAGS}")

set(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin")
set(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin")

add_subdirectory(src)

# get_cmake_property(_variableNames VARIABLES)
# list (SORT _variableNames)
# foreach (_variableName ${_variableNames})
#     message(STATUS "${_variableName}=${${_variableName}}")
# endforeach()
